// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loadIntermOrg should call sequelize.query with correct SQL and parameters 1`] = `
[MockFunction] {
  "calls": [
    [
      "
 WITH "newData" AS (
    SELECT
      O."sbi",
      A."businessAddress1" AS "addressLine1",
      A."businessAddress2" AS "addressLine2",
      A."businessAddress3" AS "addressLine3",
      A."businessCity" AS "city",
      A."businessCounty" AS "county",
      A."businessPostCode" AS "postcode",
      A."businessEmailAddr" AS "emailAddress",
      A."frn",
      A."businessName" AS "name",
      O."lastUpdatedOn"::date AS "updated",
      O."partyId",
      O."changeType"
    FROM public."etlStageOrganisation" O
    INNER JOIN public."etlStageBusinessAddressContactV" A ON A.sbi = O.sbi
    WHERE O."etlId" BETWEEN 1 AND 2
      
  ),
  "updatedrows" AS (
    UPDATE public."etlIntermOrg" interm
    SET
      "addressLine1" = "newData"."addressLine1",
      "addressLine2" = "newData"."addressLine2",
      "addressLine3" = "newData"."addressLine3",
      city = "newData".city,
      county = "newData".county,
      postcode = "newData".postcode,
      "emailAddress" = "newData"."emailaddress",
      frn = "newData".frn,
      sbi = "newData".sbi,
      "name" = "newData".name,
      updated = "newData".updated,
      "etlInsertedDt" = NOW()
    FROM "newData"
    WHERE "newData"."changeType" = 'UPDATE'
      AND interm."partyId" = "newData"."partyId"
    RETURNING interm."partyId"
  )
  INSERT INTO public."etlIntermOrg" (
    "sbi",
    "addressLine1",
    "addressLine2",
    "addressLine3",
    city,
    county,
    postcode,
    "emailAddress",
    frn,
    "name",
    "partyId",
    updated
  )
  SELECT
    sbi,
    "addressLine1",
    "addressLine2",
    "addressLine3",
    city,
    county,
    postcode,
    "emailAddress",
    frn,
    "name",
    "partyId",
    updated
  FROM "newData"
  WHERE "changeType" = 'INSERT'
    OR ("changeType" = 'UPDATE' AND "partyId" NOT IN (SELECT "partyId" FROM updatedrows));
",
      {
        "raw": true,
        "replacements": {},
        "transaction": undefined,
      },
    ],
    [
      "
 WITH "newData" AS (
    SELECT
      O."sbi",
      A."businessAddress1" AS "addressLine1",
      A."businessAddress2" AS "addressLine2",
      A."businessAddress3" AS "addressLine3",
      A."businessCity" AS "city",
      A."businessCounty" AS "county",
      A."businessPostCode" AS "postcode",
      A."businessEmailAddr" AS "emailAddress",
      A."frn",
      A."businessName" AS "name",
      O."lastUpdatedOn"::date AS "updated",
      O."partyId",
      O."changeType"
    FROM public."etlStageOrganisation" O
    INNER JOIN public."etlStageBusinessAddressContactV" A ON A.sbi = O.sbi
    WHERE O."etlId" BETWEEN 1 AND 2
       AND O."etlId" NOT BETWEEN 1 AND 2
  ),
  "updatedrows" AS (
    UPDATE public."etlIntermOrg" interm
    SET
      "addressLine1" = "newData"."addressLine1",
      "addressLine2" = "newData"."addressLine2",
      "addressLine3" = "newData"."addressLine3",
      city = "newData".city,
      county = "newData".county,
      postcode = "newData".postcode,
      "emailAddress" = "newData".emailaddress,
      frn = "newData".frn,
      sbi = "newData".sbi,
      "name" = "newData".name,
      updated = "newData".updated,
      "etlInsertedDt" = NOW()
    FROM "newData"
    WHERE "newData"."changeType" = 'UPDATE'
      AND interm."partyId" = "newData"."partyId"
    RETURNING interm."partyId"
  )
  INSERT INTO public."etlIntermOrg" (
    "sbi",
    "addressLine1",
    "addressLine2",
    "addressLine3",
    city,
    county,
    postcode,
    "emailAddress",
    frn,
    "name",
    "partyId",
    updated
  )
  SELECT
    sbi,
    "addressLine1",
    "addressLine2",
    "addressLine3",
    city,
    county,
    postcode,
    "emailAddress",
    frn,
    "name",
    "partyId",
    updated
  FROM "newData"
  WHERE "changeType" = 'INSERT'
    OR ("changeType" = 'UPDATE' AND "partyId" NOT IN (SELECT "partyId" FROM updatedrows));
",
      {
        "raw": true,
        "replacements": {},
        "transaction": undefined,
      },
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;
